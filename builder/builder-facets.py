class Person:     def __init__(self):         print("Creating person")         # Address         self.street = None         self.city = None         self.pincode = None          # Job         self.title = None         self.company_name = None         self.company_address = None      def __repr__(self):         return f"Person: {self.street} / {self.city} / {self.pincode} \nWorks: {self.title} @ {self.company_name}, {self.company_address}"   class PersonBuilder:     def __init__(self, person=None):         if person == None:             self.person = Person()         else:             self.person = person      @property     def works(self):         return PersonJobBuilder(self.person)      @property     def lives(self):         return PersonAddressBuilder(self.person)      def build(self):         return self.person   class PersonAddressBuilder(PersonBuilder):     def __init__(self, person):         super().__init__(person)      def at(self, street):         self.person.street = street         return self      def in_city(self, city):         self.person.city = city         return self      def with_pincode(self, pincode):         self.person.pincode = pincode         return self   class PersonJobBuilder(PersonBuilder):     def __init__(self, person):         super().__init__(person)      def at(self, company_name):         self.person.company_name = company_name         return self      def as_a(self, title):         self.person.title = title         return self      def based_in(self, company_address):         self.person.company_address = company_address         return self   sherlock = (     PersonBuilder()     .lives.at("221B Baker Street")     .in_city("London")     .with_pincode("123")     .works.as_a("Private detecive")     .at("Sherlock Holmes Inc.")     .based_in("Sydney") ).build()  print(sherlock) 